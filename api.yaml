openapi: 3.0.2
info:
  title: AGDATA Phoenix API
  version: '1.0'
servers:
  - url: http://127.0.0.1:63331/api
    description: Locally running Phoenix desktop.
  - url: https://px.agdata.com.au
    description: Phoenix Live.
security:
  - BearerToken: []

paths:
  /accounts:
    get:
      summary: List all financial accounts
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - financial
      parameters:
      - name: accountTypeId
        description: |
          Limit results to accounts of a particular type. This Id is the ordinal value of the `TAccountType` in Phoenix.
        in: query
        required: false
        schema:
          type: integer
      responses:
        200:
          description: Array of financial accounts.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'

  /accounttypes:
    get:
      summary: List all financial account types
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - financial
      responses:
        200:
          description: Array of financial account types.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountType'

  /animalbreeds:
    get:
      summary: List all animal breeds
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      responses:
        200:
          description: Array of animal breeds.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnimalBreed'

  /animalclasses:
    get:
      summary: List all animal classes
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      responses:
        200:
          description: Array of animal classes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnimalClass'

  /animaldevices:
    get:
      summary: List all animal devices
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      responses:
        200:
          description: Array of animal devices.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnimalDevice'

  /animaldevicestatus:
    get:
      summary: List all animal device status
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      responses:
        200:
          description: Array of animal devices status.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnimalDeviceStatus'

  /animaltypes:
    get:
      summary: List all animal types
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      responses:
        200:
          description: Array of animal types.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnimalType'

  /appoptions/{optionname}:
    get:
      summary: Retrieve the options for the app option name
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      parameters:
      - name: optionname
        description: The name of the option
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: App options
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppOptions'
    put:
      summary: Save the app options
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      parameters:
      - name: optionname
        description: The name of the option
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppOptions'
      responses:
        200:
          description: App options
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppOptions'
                
  /carcaseimportmappings:
    post:
      summary: Upload a data file for field import mapping.
      description: |
        Uploads a file to Phoenix, and returns basic properties and example records to assist
        with field mapping.
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: File properties and example records.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarcaseFileImport'
    put:
      summary: Import the csv file using the given mappings.
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarcaseFileImportMap'
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarcaseFileImportResult'
      
  /carcasetraits:
    get:
      summary: List all livestock carcase traits
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      parameters:
      - name: activityId
        description: Specify this parameter (1 or more times) to limit results to only carce traits present in specific Livestock Activities.
        schema:
          type: integer
        in: query
        required: false
      responses:
        200:
          description: Array of carcase traits.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarcaseTrait'
                  
  /cardfiles:
    get:
      summary: List paged card file entries
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - suite
      parameters:
      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/Offset'
      responses:
        200:
          description: Array of CardFile entries.
          headers:
            X-TotalCount:
              $ref: '#/components/headers/X-TotalCount'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CardFile'
        403:
          description: |
           The user does not have at least read-only permission to the UMS SetupCardFile access item.

  /appconfig:
    get:
      summary: Application config for embedded Phoenix
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - dashboards
      responses:
        200:
          description: The application configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppConfig'

  /dashboardreports/animalclasses:
    get:
      summary: List animal classes with head counts
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - dashboard reports
      parameters:
      - name: propertyId
        in: query
        schema:
          type: integer
        required: false
        description: Limit results to only crops on a specific property.
      responses:
        200:
          description: Array of animal classes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnimalClassHeadCount'

  /dashboardreports/cropseasons:
    get:
      summary: List crop seasons with their areas.
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - dashboard reports
      parameters:
      - name: propertyId
        in: query
        schema:
          type: integer
        required: false
        description: Limit results to only crops on a specific property.
      responses:
        200:
          description: Array of crop seasons.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CropSeason'

  /dashboardreports/produceinventory:
    get:
      summary: List produce in inventory with their quantities
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - dashboard reports
      - inventory
      responses:
        200:
          description: Array of produce in inventory.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProduceInventoryQuantity'

  /dashboardreports/productinventory:
    get:
      summary: List products in inventory with their quantities
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - dashboard reports
      - inventory
      parameters:
      - name: storageId
        in: query
        description: Limit results to products that exist in a prticular storage.
        schema:
          type: integer
        required: false
      responses:
        200:
          description: Array of products in inventory.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductInventoryQuantity'

  /dashboardreports/tradingaccountsunpaidinvoices:
    get:
      summary: Gets unpaid invoices for the given open item customer or supplier account type, starting from the oldest invoices.
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - dashboard reports
      parameters:
      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/Offset'
      - name: accountTypeId
        description: The accountTypeId of accounts to include when finding sub-accounts with unpaid invoices.
        schema:
          type: integer
        required: true
        in: query
      responses:
        200:
          description: Paged array of unpaid invoices.
          headers:
            X-TotalCount:
              $ref: '#/components/headers/X-TotalCount'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Invoice'

  /dashboardreports/reconciledaccountbalancehistory:
    get:
      summary: Retrieve closing period balances for reconciled accounts
      description: Defaults to the most recent 6 periods, unless a different `limit` is defined.
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
        - dashboard reports
      parameters:
      - $ref: '#/components/parameters/Limit'
      - name: accountId
        description: ID of the account to retrieve period balances for.
        in: query
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Array of account period balances.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountReconciledPeriodBalance'

  /dashboardreports/tradingaccountsoutstandingbalance:
    get:
      summary: List trading accounts with the largest outstanding balances
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - dashboard reports
      parameters:
      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/Offset'
      - name: accountTypeId
        description: The accountTypeId of accounts to include when finding sub-accounts with the largest outstanding balances.
        schema:
          type: integer
        required: true
        in: query
      responses:
        200:
          description: Paged array of outstanding trading accounts with balance.
          headers:
            X-TotalCount:
              $ref: '#/components/headers/X-TotalCount'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TradingAccountOwing'

  /dashboardreports/tradingaccountsummaries/{subAccountId}:
    get:
      summary: Retrieve a position summary for a trading sub-account
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - dashboard reports
      parameters:
      - name: subAccountId
        description: Sub-account Id of the trading sub account to retrieve as summary for.
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: The sub-account summary.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradingAccountSummary'

  /dashboardreports/waterinventory:
    get:
      summary: List all water storages with current volumes
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - dashboard reports
      - inventory
      parameters:
      - $ref: '#/components/parameters/StoragesPropertyId'
      responses:
        200:
          description: Array of water storages with volume quantity.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WaterInventoryQuantity'

  /dashboards:
    get:
      summary: Retrieve a dashboard
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - dashboards
      parameters:
      - $ref: '#/components/parameters/DashboardName'
      responses:
        200:
          description: Array of dashboards.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dashboard'
  
  /dashboards/{dashboardId}/gadgets:
    put:
      summary: Replace all gadgets on a dashboard
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - dashboards
      parameters:
      - name: dashboardId
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          appliction/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DashboardGadget'
      responses:
        200:
          description: Dashboard gadgets successfully replaced.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DashboardGadget'


  /dashboardgadgets:
    get:
      summary: Retrieve dashboard gadgets
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - dashboards
      parameters:
      - name: dashboardId
        description: Limit results to only gadgets belonging to a dashboard with the given Id.
        in: query
        schema:
          type: integer
        required: false
      responses:
        200:
          description: Array of dashboard gadgets.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DashboardGadget'
    post:
      summary: Add a dashboard gadget
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - dashboards
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardGadget'
      responses:
        201:
          description: Dashboard gadget created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardGadget'

  /dashboardgadgets/{dashboardGadgetId}:
    get:
      summary: Retrieve a dashboard gadget.
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - dashboards
      parameters:
      - name: dashboardGadgetId
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Dashboard gadget.
          content:
            applicaton/json:
              schema:
                $ref: '#/components/schemas/DashboardGadget'
    delete:
      summary: Delete a dashboard gadget.
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - dashboards
      parameters:
      - name: dashboardGadgetId
        in: path
        required: true
        schema:
          type: integer
      responses:
        204:
          description: Delete successful.

  /dashboardgadgets/{dashboardGadgetId}/config:
    put:
      summary: Replace a dashboard gadget's config
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - dashboards
      parameters:
      - name: dashboardGadgetId
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        204:
          description: Config updated successfully.

  /datasets:
    get:
      summary: List datasets available to the current user.
      tags:
      - phoenix live
      parameters:
      - name: uacPermittedOnly
        description: Filter results to datasets that user has permitted UAC access to.
        in: query
        schema:
          type: boolean
      - name: minDataVersion
        description: Filter results to datasets that have a version number the same or greater than the supplied value.
        in: query
        schema:
          type: string
        example: 10.1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'

  /files:
    get:
      summary: List file properties without file content
      tags:
        - file library
      security:
        - BearerToken: []
        - DatasetId: []
        - AgDataD: []
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - name: order
          in: query
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
        - name: sort
          in: query
          required: false
          description: Sort the results by a single property
          schema:
            type: string
            default: created
            enum:
              - created
              - filename
        - name: transactionId
          description: Filter results by one or more linked transaction Id(s).
          in: header
          required: false
          schema:
            type: integer
            format: int64
        - name: tag
          description: |
            Filter results by one or more tags. Results must have at least one of the given values, or optionally
            alter this behaviour with one of the following options:
             
            * **tag.in**   - results must have at least one of these tags (comma delimited)
            * **tag.all**  - results must have all of these tags (comma delimited)
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/FileLibraryItemTags'
      responses:
        200:
          description: Success
          headers:
            X-TotalCount:
              $ref: '#/components/headers/X-TotalCount'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileLibraryItem'
    post:
      summary: Add a file
      tags:
        - file library      
      security:
        - BearerToken: []
        - DatasetId: []
        - AgDataD: []
      parameters:
        - name: x-agdata-transactionIds
          description: Linked financial transaction Ids
          in: header
          required: false
          schema:
            type: array
            items:
              type: integer
        - name: x-agdata-tags
          description: String tags
          in: header
          required: false
          schema:
            $ref: '#/components/schemas/FileLibraryItemTags'
        - $ref: '#/components/parameters/UsernameHeader'
      requestBody: 
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        201:
          description: File upload success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileLibraryItem'

  /files/{id}:
    get:
      summary: Get file properties or contents
      tags:
        - file library
      security:
        - BearerToken: []
        - DatasetId: []
        - AgDataD: []
      parameters:
        - $ref: '#/components/parameters/FileLibraryFileId'
      responses:
        200:
          description: Success
          content:
            application/octect-stream:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                $ref: '#/components/schemas/FileLibraryItem'
    patch:
      summary: Update file properties
      tags:
        - file library
      security:
        - BearerToken: []
        - DatasetId: []
        - AgDataD: []
      parameters:
        - $ref: '#/components/parameters/FileLibraryFileId'
      requestBody: 
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/FileLibraryItemBinding'
      responses:
        200:
          description: Update successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileLibraryItem'
      
    delete:
      summary: Delete a file
      tags:
        - file library
      security:
        - BearerToken: []
        - DatasetId: []
        - AgDataD: []
      parameters:
        - $ref: '#/components/parameters/FileLibraryFileId'
        - $ref: '#/components/parameters/UsernameHeader'
      responses:
        204:
          description: Deleted successfully
    
  /files/{id}/tags:
    post:
      summary: Add a tag to a file's properties
      tags:
        - file library
      security:
        - BearerToken: []
        - DatasetId: []
        - AgDataD: []
      parameters:
        - $ref: '#/components/parameters/FileLibraryFileId'
      requestBody: 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileLibraryItemTagBinding'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileLibraryTag'

  /files/{id}/tags/{tagName}:
    delete:
      summary: Remove a tag from a file
      tags:
        - file library
      security:
        - BearerToken: [ ]
        - DatasetId: [ ]
        - AgDataD: [ ]
      parameters:
        - $ref: '#/components/parameters/FileLibraryFileId'
        - name: tagName
          in: path
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 32
      responses:
        204:
          description: Success        
  
  /files/{id}/transactionlinks:
    post:
      summary: Link transaction to a file
      tags:
        - file library
      security:
        - BearerToken: []
        - DatasetId: []
        - AgDataD: []
      parameters:
        - $ref: '#/components/parameters/FileLibraryFileId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileLibraryItemTransactionLinkBinding'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileLibraryItemTransactionLink'

  /files/{id}/transactionlinks/{transactionId}:
    delete:
      summary: Unlink a transaction from a file
      tags:
        - file library
      security:
        - BearerToken: [ ]
        - DatasetId: [ ]
        - AgDataD: [ ]
      parameters:
        - $ref: '#/components/parameters/FileLibraryFileId'
        - name: transactionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: Success

  /filetags:
    get:
      summary: List all current tags for files
      tags:
        - file library
      security:
        - BearerToken: []
        - DatasetId: []
        - AgDataD: []
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - name: prefix
          description: Optionally filter results by prefix
          in: query
          required: false
          schema:
              type: string
              minLength: 2
              maxLength: 32
      responses:
        200:
          description: Success
          headers:
            X-TotalCount:
              $ref: '#/components/headers/X-TotalCount'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileLibraryTag'

  /helpcontext/{helpContextId}:
    get:
      summary: Open Phoenix help to a specific context
      description: |
        Only available in the Phoenix desktop implementation.
      tags:
      - suite
      parameters:
      - name: helpContextId
        description: Help context Id to open.
        in: path
        required: true
        schema:
          type: integer
      responses:
        204:
          description: Request successful
          
  /inventory/products/batchadjustments:
    post:
      summary: Updates an existing product batch to reflect the actual stored batch quantity, and the reason for the discrepancy.
      tags:
      - inventory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryBatchAdjustment'
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryBatchAdjustment'
        403:
          description: |
            Access Denied. Dataset does not exist or the following UMS permissions are missing.
            * UseLivestock
            * EditLivestock

  /inventory/products/batchadjustments/{id}:
    delete:
      summary: Delete a product batch adjustment.
      tags:
      - inventory
      parameters:
        - name: id
          description: Adjustment id (StrgH.StorageHistoryID).
          in: path
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Adjustment successfully deleted.
        400:
          description: A validation problem prevented deleting the Adjustment.
        403:
          description: |
            Access Denied. Dataset does not exist or the following UMS permissions are missing.
            * UseLivestock or UseCropping
            * EditLivestock or EditCropping

  /inventory/products/batches:
    get:
      summary: Get inventory product batches with calculated prices and quantities.
      description: |
        Get inventory batches of a given product or a given product type, with quantities and prices as at the given date. 
        If a date is not given then these will be the current values of the batches.
        
        This has an important implication for activities that can use inventory products (e.g. Livestock Treatments) - if the date of an 
        activity changes, then any inventory batches already acquired for the activity must be fetched again to ensure that the batch 
        quantities and prices are correct for the new date.
        
        Batches may be empty, expired or spoiled. The user must have UMS access to the property where a batch is stored or the batch will not be returned.
        
        Parameters productid and producttypeid are mutually exclusive.        
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - inventory
      parameters:
      - name: productid
        description: |
          Only batches of this product are returned.
          Parameters productid and producttypeid are mutually exclusive.
        in: query
        schema: 
          type: integer
      - name: producttypeid
        description: |
          Batches of all products of this product type are returned.
          Parameters producttypeid and productid are mutually exclusive.
        in: query
        schema: 
          type: integer          
      - name: date
        description: The date of the required batch state, i.e. quantity & unit price. Omitting the date parameter returns the latest batch information.
        in: query
        schema:
          type: string
          format: date
      - name: empty
        description: When true only empty batches are returned; when false only non-empty batches are returned.
        in: query
        schema:
          type: boolean
      responses:
        200: 
          description: Array of inventory batches.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InventoryBatch' 
        403:
          description: | 
            Access Denied. Dataset does not exist or the following UMS permissions are missing.
            * UseLivestock or UseCropping
  
  /inventory/products/batchhistory:
    get:
      summary: Get purchases, transfers, adjustments and usages of inventory product batches.
      tags:
      - inventory
      parameters:
      - name: productTypeId
        description: Limit results to batches of the given product type, eg. Veterinary products
        in: query
        schema:
          type: integer
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchHistory'
        403:
          description: |
            Access Denied. Dataset does not exist or the following UMS permissions are missing.
            * UseLivestock or UseCropping
            
  /inventory/products/batchpurchases:
    post:
      summary: Add an inventory product batch purchase to the inventory system.
      tags:
      - inventory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductBatchBinding'
      responses:
        200:
          description: Inventory batches that were created or added to.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InventoryBatch'
        403:
          description: | 
            Access Denied. Dataset does not exist or the following UMS permissions are missing.
            * UseLivestock or UseCropping
            * EditLivestock or EditCropping

  /inventory/products/batchpurchases/{id}:
    delete:
      summary: Delete an inventory product batch purchase.
      tags:
        - inventory
      parameters:
        - name: id
          description: Purchase id.
          in: path
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Purchase successfully deleted.
        400:
          description: A validation problem prevented deleting the Purchase.
        403:
          description: |
            Access Denied. Dataset does not exist or the following UMS permissions are missing.
            * UseLivestock or UseCropping
            * EditLivestock or EditCropping
      
  /inventory/products/batchtransfers:
    post:
      summary: Transfer some or all of a product batch from one storage location to another.
      tags:
      - inventory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryBatchTransfer'
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryBatchTransfer'

        403:
          description: | 
            Access Denied. Dataset does not exist or the following UMS permissions are missing.
            * UseLivestock or UseCropping
            * EditLivestock or EditCropping

  /inventory/products/batchtransfers/{id}:
    delete:
      summary: Delete an inventory product transfer.
      tags:
      - inventory
      parameters:
        - name: id
          description: Transfer id (StrgH.StorageHistoryID).
          in: path
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Transfer successfully deleted.
        400:
          description: A validation problem prevented deleting the Transfer.
        403:
          description: |
            Access Denied. Dataset does not exist or the following UMS permissions are missing.
            * UseLivestock or UseCropping
            * EditLivestock or EditCropping
            
  /livestockactivities:
    get:
      summary: Retrieve a list of livestock activities. Currently in Delphi API only.
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      parameters:
      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/Offset'
      - name: activityTypeId
        description: Filter results to only activities of a particular type.
        in: query
        required: false
        schema:
          type: integer
      - name: start
        description: Filter results to only activities on or after a given date.
        in: query
        required: false
        schema:
          type: string
          format: date
      - name: finish
        description: Filter results to only activities before or on given date.
        in: query
        required: false
        schema:
          type: string
          format: date          
      - name: order
        description: Change whether results are sorted by date ascensing (asc) or descending (desc). Defaults to descending.
        in: query
        required: false
        schema:
          type: string
          enum:
          - asc
          - desc            
      responses:
        200:
          description: Array of livestock activities.
          headers:
            X-TotalCount:
              $ref: '#/components/headers/X-TotalCount'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LivestockActivity'
                  
  /livestockactivityhistory:
    get:
      summary: Retrieve a list of the most recent Livestock activities for all animals.  
      description: Not implemented in the Delphi API.
      tags:
      - production
      parameters:
      - name: limit
        description: The number of each type of activity to return for each animal group (individual classes or mob).
        in: query
        schema:
          type: integer
      responses:
        200:
          description: Array of Livestock Activity History objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LivestockAllHistory'                  

  /livestockactivitytypes:
    get:
      summary: Retrieve all Livestock activity types
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      responses:
        200:
          description: Array of Livestock activity types.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LivestockActivityType'
  
  /livestockclassicons:
    get:
      summary: Retrieve a list of all active livestock classes and their icon, colour and marker
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      parameters:
      - name: animaltype
        description: Limit results to livestock classes of a particular type. The type is either individuals or mobs.
        in: query
        schema:
          type: string
      responses:
        200:
          description: Array of livestock class icons.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LivestockClassIcon'  
    patch:
      summary: Save livestock mapping icon and colours for an array of classes
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items: 
                $ref: '#/components/schemas/LivestockIconBinding'
      responses:
        204:
          description: Save Successful

  /livestockclassicons/{classId}:
    get:
      summary: Retrieve a livestock class and its icon, colour and marker
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      parameters:
      - name: classId
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Livestock class icon.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LivestockClassIcon'  

  /livestockfeeds:
    get:
      summary: Retrieve a paged list of Livestock Feed activities in descending chronological order.
      description: | 
        Either the mobId parameter, or both the classId and paddockId parameters must be supplied.
        
        For Feeds of individuals, the head count is the number of animals of the given class that are 
        currently in the given paddock (not necessarily the total number of animals treated).
        
        For Feeds of mobs, the head count is always the total number of animals recorded in the Feed.
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      parameters:
      - $ref: '#/components/parameters/Page'
      - $ref: '#/components/parameters/PageSize'
      - name: classId
        description: Individual animal class id. Used in conjunction with the paddockId parameter.
        in: query
        schema:
          type: integer
      - name: paddockId
        description: Paddock id where animals are located. Used in conjunction with the classId parameter.
        in: query
        schema:
          type: integer
      - name: mobId
        description: Animal id of a mob.
        in: query
        schema:
          type: integer      
      responses:
        200:
          description: Array of Livestock Feed activity objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LivestockFeed'

        403:
          description: | 
            Access Denied. Dataset does not exist or the following UMS permissions are missing.
            * UseLivestock
            
    post:
      summary: Save one or more livestock Feed activities.
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LivestockFeedsBinding'
      responses: 
        201:
          description: Array of Feed activity objects, one per activity created.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LivestockFeed'

        403:
          description: | 
            Access Denied. Dataset does not exist or the following UMS permissions are missing.
            * UseLivestock
            * EditLivestock
            
  /livestockfeeds/{id}:
    get:
      summary: Retrieve a Livestock Feed activity.
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      parameters:
      - name: id
        in: path
        schema:
          type: integer
        required: true
      responses:
        200:
          description: A Livestock Feed activity.
          content:
            application/json:
              schema:
                $ref:  '#/components/schemas/LivestockFeed'
                
        403:
          description: | 
            Access Denied. Dataset does not exist or the following UMS permissions are missing.
            * UseLivestock

    delete:
      summary: Delete a Livestock Feed activity.
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags: 
      - production
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        204: 
          description: Success.

        403:
          description: | 
            Access Denied. Dataset does not exist or the following UMS permissions are missing.
            * UseLivestock
            * EditLivestock
                        
  /livestockfeedshistory:
    get:
      summary: Retrieve a list of the most recent Livestock Feed activities for all animals.
      tags:
      - production
      parameters:
      - name: limit
        description: The number of activites to return for each animal group (individual classes or mob).
        in: query
        schema:
          type: integer
      responses:
        200:
          description: Array of Livestock Feed activities.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LivestockFeedHistory'

  /livestockmobicons:
    get:
      summary: Retrieve a list of all active livestock mobs and their icon, colour and marker
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      responses:
        200:
          description: Array of livestock mob icons.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LivestockMobIcon'  
    patch:
      summary: Save livestock mapping icon and colours for an array of mobs
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items: 
                $ref: '#/components/schemas/LivestockIconBinding'
      responses:
        204:
          description: Save Successful

  /livestockmobicons/{mobId}:
    get:
      summary: Retrieve a livestock mob and its icon, colour and marker
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      parameters:
      - name: mobId
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Livestock mob icon.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LivestockMobIcon'  

  /livestockoptions:
    get:
      summary: Retrieve options that have been set inside livestock
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      responses:
        200:
          description: Livestock options
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LivestockOptions'

  /livestockmovements:
    get:
      summary: Get Livestock Movement activities in descending chronological order
      description: |
        Supply the mobId parameter for mob movements, or both the classId and paddockId parameters for individual movements.
        
        For Movements of individuals, the head count is the number of animals of the given class that are 
        currently in the given paddock (not necessarily the total number of animals moved).
        
        For Movements of mobs, the head count is always the total number of animals recorded in the Movement.      
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      parameters:
      - $ref: '#/components/parameters/Page'
      - $ref: '#/components/parameters/PageSize'
      - name: classId
        description: Individual animal class id. Used in conjunction with the paddockId parameter.
        in: query
        schema:
          type: integer
      - name: paddockId
        description: Paddock id where animals are located. Used in conjunction with the classId parameter.
        in: query
        schema:
          type: integer
      - name: mobId
        description: Animal id of a mob.
        in: query
        schema:
          type: integer      
      responses:
        200:
          description: Array of Livestock Movement activity objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LivestockMovement'

        403:
          description: | 
            Access Denied. Dataset does not exist or the following UMS permissions are missing.
            * UseLivestock

    post:
      summary: Save a livestock movement
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LivestockMovementBinding'
      responses:
        201:
          description: Array of movement activity objects, one per activity created.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LivestockMovement'

        403:
          description: | 
            Access Denied. Dataset does not exist or the following UMS permissions are missing.
            * UseLivestock
            * EditLivestock
            
  /livestockmovements/{id}:            
    delete:
      summary: Delete a Livestock Movement activity.
      description: For any animal, only the latest Movement where there is no following Sale may be deleted.
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        204: 
          description: Success.

        400:
          description: |
            One or more animals in the Movement to delete are part of a later Movement or Sale activity.
        403:
          description: | 
            Access Denied. Dataset does not exist or the following UMS permissions are missing.
            * UseLivestock
            * EditLivestock

  /livestockmovementshistory:
    get:
      summary: Retrieve a list of the most recent Livestock Movement activities for all animals.
      tags:
      - production
      parameters:
      - name: limit
        description: The number of activites to return for each animal group (individual classes or mob).
        in: query
        schema:
          type: integer
      responses:
        200:
          description: Array of Livestock Movement History objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LivestockMovementHistory'            
                  

  /livestocktreatments:
    get:
      summary: Retrieve a paged list of Livestock Treatment activities in descending chronological order.
      description: | 
        Either the mobId parameter, or both the classId and paddockId parameters must be supplied.
        
        For Treatments of individuals, the head count is the number of animals of the given class that are 
        currently in the given paddock (not necessarily the total number of animals treated).
        
        For Treatments of mobs, the head count is always the total number of animals recorded in the Treatment.
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      parameters:
      - $ref: '#/components/parameters/Page'
      - $ref: '#/components/parameters/PageSize'
      - name: classId
        description: Individual animal class id. Used in conjunction with the paddockId parameter.
        in: query
        schema:
          type: integer
      - name: paddockId
        description: Paddock id where animals are located. Used in conjunction with the classId parameter.
        in: query
        schema:
          type: integer
      - name: mobId
        description: Animal id of a mob.
        in: query
        schema:
          type: integer
      responses:
        200:
          description: Array of Livestock Treatment activity objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LivestockTreatment'

        403:
          description: | 
            Access Denied. Dataset does not exist or the following UMS permissions are missing.
            * UseLivestock

    post:
      summary: Save one or more livestock Treatment activities.
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LivestockTreatmentsBinding'
      responses: 
        201:
          description: Array of treatment activity objects, one per activity created.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LivestockTreatment'

        403:
          description: | 
            Access Denied. Dataset does not exist or the following UMS permissions are missing.
            * UseLivestock
            * EditLivestock

  /livestocktreatments/{id}:
    get:
      summary: Retrieve a Livestock Treatment activity.
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      parameters:
      - name: id
        in: path
        schema:
          type: integer
        required: true
      responses:
        200:
          description: A Livestock Treatment activity.
          content:
            application/json:
              schema:
                $ref:  '#/components/schemas/LivestockTreatment'
                
    delete:
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags: 
      - production
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        204: 
          description: Success.

        403:
          description: | 
            Access Denied. Dataset does not exist or the following UMS permissions are missing.
            * UseLivestock
            * EditLivestock                
                
  /livestocktreatmentshistory/:
    get:
      summary: Retrieve a list of the most recent Livestock Treatment activities for all animals.
      tags:
      - production
      parameters:
      - name: limit
        description: The number of activites to return for each animal group (individual classes or mob).
        in: query
        schema:
          type: integer          
      responses:
        200:
          description: Array of Livestock Treatment activities.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LivestockTreatmentHistory'
        
  /mappingprojects:
    get:
      summary: Retrieve a list of mapping projects for the dataset
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      parameters:
      - name: productionlayers
        description: When true limit results to mapping projects that contain at least one shape that is linked to a paddock. If false or no value then return all projects.
        in: query
        schema:
          type: boolean
      responses:
        200:
          description: Array of mapping projects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MappingProject'

  /mappingprojects/{projectid}:
    get:
      summary: Find a mapping project by Id
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      parameters:
      - name: projectid
        description: Mapping project Id to be found.
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Mapping project.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingProject'

  /mappingprojectlayers:
    get:
      summary: Retrieve a list of mapping project layers for a mapping project
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      parameters:
      - name: project
        description:  The mapping project Id to find the layers for.
        in: query
        required: true
        schema:
          type: string
      - name: productionlayers
        description: When true limit results to mapping layers that contain at least one shape that is linked to a paddock. If false or no value then return all layers.
        in: query
        schema:
          type: boolean
      responses:
        200:
          description: Array of mapping layers.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MappingProjectLayer'
                
  /mappingprojectlayers/{projectlayerid}:
    get:
      summary: Find a mapping project layer by Id
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      parameters:
      - name: projectlayerid
        description:  Mapping project layer Id to be found.
        in: path
        required: true
        schema:
          type: string
      - name: cs
        description:  |
          Specifies the coordinate system for GeoJSON to be returned in if it has been requested. Default is ESPG:4326. 
          Supported coordinate systems are: EPSG4326, EPSG3857.
        in: query
        required: false
        schema:
          type: string
      responses:
        200:
          description: Mapping layer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingProjectLayer'
            application/vnd.geo+json:
              schema:
                $ref: '#/components/schemas/MappingProjectLayerGeoJson'

  /measurementunits:
    get:
      summary: List all measurement units
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      - financial
      parameters:
      - name: measurementtype
        description: Return only units with the required measurement type Id
        in: query
        schema:
          type: integer
      responses:
        200:
          description: Array of measurement units.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MeasurementUnit'
  
  /measurementunits/{measurementid}:
    get:
      summary: Retrieve the required measurement unit
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      - financial
      parameters:
      - name: measurementid
        description: The required measurement unit
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Measurement unit.
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/MeasurementUnit'
  
  /paddocks:
    get:
      summary: List all paddocks
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      parameters:
      - name: expand
        description: Use value of livestockcounts to also return the animals that are on each paddock. The animals will either be grouped by mob or grouped by class for individuals.
        in: query
        schema:
          type: string
      - name: owned
        description: Only return paddocks that are on an owned property
        in: query
        schema:
          type: boolean      
      responses:
        200:
          description: Array of property paddocks.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Paddock'

        403:
          description: | 
            Access Denied. Dataset does not exist or the following UMS permissions are missing.
            * UseLivestock
            
  /producestorages:
    get:
      summary: List produce storages with contents and capacities.
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      parameters:
      - name: propertyid
        description: List only the storages on this property.
        in: query
        schema:
          type: integer
      responses:
        200:
          description: Array of produce storages.
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/ProduceStorage'

        403:
          description: | 
            Access Denied. Dataset does not exist or the following UMS permissions are missing.
            * UseLivestock

  /products:
    get:
      summary: List all production products.
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      parameters:
      - name: producttypeid
        description: List only products of this product type.
        in: query
        schema:
          type: integer
      responses:
        200:
          description: Array of products.
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Product'

        403:
          description: | 
            Access Denied. Dataset does not exist or the following UMS permissions are missing.
            * UseLivestock

  /producttypes:
    get:
      summary: List all product types
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      responses:
        200:
          description: Array of product types.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductType'

        403:
          description: | 
            Access Denied. Dataset does not exist or the following UMS permissions are missing.
            * UseLivestock

  /properties:
    get:
      summary: List all properties
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      parameters:
      - name: owned
        description: Only return properties that are owned
        in: query
        schema:
          type: boolean      
      responses:
        200:
          description: Array of production properties.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Property'

        403:
          description: | 
            Access Denied. Dataset does not exist or the following UMS permissions are missing.
            * UseLivestock

  /properties/{propertyid}:
    get:
      summary: Find a property by Id
      description: Not implemented in the embedded Delphi API
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      parameters:
      - name: propertyid
        description: The required property Id
        in: path
        required: true
        schema:
          type: integer      
      responses:
        200:
          description: Property
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'

        403:
          description: | 
            Access Denied. Dataset does not exist or the following UMS permissions are missing.
            * UseLivestock
    
    put:
      summary: Update the property
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      parameters:
      - name: propertyid
        description: The required property Id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyBinding'
      responses:
        200:
          description: Property
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'

        403:
          description: | 
            Access Denied. Dataset does not exist or the following UMS permissions are missing.
            * UseLivestock

  /reportselectors/carcase:
    get:
      summary: Get report selector data for the carcase report
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production reports
      responses:
        200:
          description: Report selector data for the carcase report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarcaseReportSelectorData'



  /reports/carcase:
    post:
      summary: Create a new carcase report
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production reports
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarcaseReportBinding'
      responses:
        200:
          description: Carcase report.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarcaseReport'

  /storages:
    get:
      summary: List all storages
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      parameters:
      - name: storageTypeId
        description: Limit results to storages of a particular type.
        in: query
        schema:
          type: integer
      - name: propertyId
        description: Limit results to storages on a particular property.
        in: query
        schema:
          type: integer
      responses:
        200:
          description: Array of storages.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Storage'

        403:
          description: | 
            Access Denied. Dataset does not exist or the following UMS permissions are missing.
            * UseLivestock

  /semaphorelock:
    post:
      summary: Create a new semaphore lock
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - semaphore
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SemaphoreLockBinding'
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SemaphoreLockResource'

  /semaphorelock/{semaphoreLockId}:
    delete:
      summary: Remove a semarphore lock
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - semaphore
      parameters:
      - name: semaphoreLockId
        in: path
        required: true
        schema:
          type: integer
      responses:
        204:
          description: Success

  /storagetypes:
    get:
      summary: List all storage types
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      tags:
      - production
      responses:
        200:
          description: Array of storage types.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StorageType'

        403:
          description: | 
            Access Denied. Dataset does not exist or the following UMS permissions are missing.
            * UseLivestock

  /users:
    get:
      summary: List Uac User's
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      parameters:
      - name: onlineAccountId
        description: Limit results to users with matching OnlineAccountId.
        in: query
        schema:
          type: string
      - name: onlineAccountEmail
        description: Limit results to users with matching OnlineAccountEmail.
        in: query
        schema:
          type: string
          format: email
      responses:
        200:
          description: Array of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      summary: Get Uac User
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      parameters:
      - name: id
        description: Uac User Id.
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: User.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    put:
      summary: Update an existing Uac User.
      security:
      - BearerToken: []
      - DatasetId: []
      - AgDataD: []
      parameters:
      - name: id
        description: Uac User Id.
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserBinding'
      responses:
        200:
          description: Updated User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'


components:

  securitySchemes:
    DatasetId:
      type: apiKey
      in: header
      name: X-DatasetId
    AgDataD:
      type: apiKey
      in: header
      name: x-agdata-d
    BearerToken:
      type: openIdConnect
      openIdConnectUrl: "https://id.agdata.com.au/.well-known/openid-configuration"

  schemas:

    Account:
      required:
      - id
      - name
      - closed
      - notInUse
      - code
      - accountTypeId
      properties:
        id:
          type: number
        name:
          type: string
        closed:
          type: boolean
        notInUse:
          type: boolean
        code:
          type: string
        accountTypeId:
          description: The ordinal value of the `TAccountType` in Phoenix.
          type: integer


    AccountReconciledPeriodBalance:
      required:
      - accountId
      - period
      - periodDuration
      - closingBalance
      properties:
        accountId:
          type: integer
        period:
          type: string
          format: date
        periodDuration:
          type: integer
        closingBalance:
          type: number

    AccountType:
      required:
      - id
      - name
      - shortName
      properties:
        id:
          description: The ordinal value of the `TAccountType` in Phoenix.
          type: integer
        name:
          type: string
        shortName:
          type: string

    AgistmentData:
      required:
      - rate
      - rateUnit
      properties:
        rate:
          type: number
        rateUnit:
          type: integer

    AnimalClass:
      required:
      - id
      - animaltypeId
      - animalRecordType
      - active
      - feedDemandUnitId
      - colour
      - pattern
      properties:
        id:
          type: integer
        name:
          type: string
        animaltypeId:
          type: integer
        subAccountId:
          type: integer
        animalRecordType:
          type: integer
        active:
          type: boolean
        feedDemandUnitId:
          type: integer
        colour:
          type: integer
        pattern:
          type: integer

    AnimalDevice:
      required:
      - id
      - animalDeviceStatusId
      properties:
        id:
          type: integer
        visualTag:
          type: string
        rfid:
          type: string
        nlisid:
          type: string
        animalDeviceStatusId:
          type: integer

    AnimalDeviceStatus:
      required:
      - id
      - name
      properties:
        id:
          type: integer
        name:
          type: string

    AnimalClassHeadCountPaddock:
      required:
      - propertyId
      - paddockId
      - headCount
      properties:
        propertyId:
          type: integer
        paddockId:
          type: integer
        headCount:
          type: integer

    AnimalClassHeadCount:
      required:
      - animalClassId
      - animalClassName
      - totalHeadCount
      - paddocks
      properties:
        animalClassId:
          type: integer
        animalClassName:
          type: string
        totalHeatCount:
          type: integer
        paddocks:
          type: array
          items:
            $ref: '#/components/schemas/AnimalClassHeadCountPaddock'

    AnimalBreed:
      required:
      - id
      - name
      - abbrevName
      - animalBreedTypeId
      - active
      - animalTypes
      properties:
        id:
          type: integer
        name:
          type: string
        abbrevName:
          type: string
        animalBreedTypeId:
          type: integer
        active:
          type: boolean
        animalTypes:
          type: array
          items:
            $ref: '#/components/schemas/AnimalType'

    AnimalType:
      required:
      - id
      - description
      - colour
      - pattern
      properties:
        id:
          type: integer
        description:
          type: string
        colour:
          type: integer
        pattern:
          type: integer

    AppConfig:
      properties:
        datasetId:
          description: Dataset Id of the dataset currently loaded in Phoenix.
          type: string
          format: uuid
          
    BatchAdjustment:
      required:
      - id
      - date
      - productId
      - batchId
      - quantityChange
      - quantityUnitId
      - storageId
      - reasonId
      properties:
        id:
          type: integer
          description: StorageHistoryId
        date:
          type: string
          format: date
        productId:
          type: integer
        batchId:
          type: integer
        batchNumber:
          type: string
        expiryDate:
          type: string
          format: date
        manufactureDate:
          type: string
          format: date
        destinationBatchId:
          type: integer
          description: Non-null for Spoiled and Expired adjustments only.
        destinationExpiryDate:
          type: string
          format: date
          description: Non-null for Spoiled and Expired adjustments only.
        storageId:
          type: integer
        quantityChange:
          type: number
          description: How much the batch quantity changed by; reductions of the source batch are negative.
        quantityUnitId:
          type: integer
        reasonId:
          type: integer
        notes:
          type: string
          
    BatchHistory:
      required:
      - purchases
      - transfers
      - adjustments
      - usages
      properties:
        purchases:
          type: array
          items:
            $ref: '#/components/schemas/BatchPurchase'
        transfers:
          type: array
          items:
            $ref: '#/components/schemas/BatchTransfer'
        adjustments:
          type: array
          items:
            $ref: '#/components/schemas/BatchAdjustment'
        usages:
          type: array
          items:
            $ref: '#/components/schemas/BatchUsage'
            
    BatchPurchase:
      required:
      - id
      - deliveryDate
      - productId
      - batchId
      - quantityUnitId
      - storages
      properties:
        id:
          type: integer
          description: PurchaseId
        deliveryDate:
          type: string
          format: date
        productId:
          type: integer
        batchId:
          type: integer
        batchNumber:
          type: string
        expiryDate:
          type: string
          format: date
        manufactureDate:
          type: string
          format: date
        quantityUnitId:
          type: integer
        totalPrice:
          type: number
        supplierId:
          type: integer
        cvd:
          type: string
        storages:
          description:
            Location(s) where the batch was stored, and the quantity stored in each location.
          type: array
          items:
            $ref: '#/components/schemas/BatchPurchaseStorages'

    BatchPurchaseStorages:
      required:
      - storageId
      - quantity
      properties:
        storageId:
          type: integer
        quantity:
          type: number
          
    BatchTransfer:
      required:
      - id
      - date
      - productId
      - sourceBatchId
      - destinationBatchId
      - quantity
      - quantityUnitId
      - sourceStorageId
      - destinationStorageId
      properties:
        id:
          type: integer
          description: StorageHistoryId
        date:
          type: string
          format: date
        productId:
          type: integer
        sourceBatchId:
          type: integer
        batchNumber:
          type: string
        expiryDate:
          type: string
          format: date
        manufactureDate:
          type: string
          format: date          
        destinationBatchId:
          type: integer
        quantity:
          type: number
          description: The amount of the batch that was transferred; negative with respect to the source batch.
        quantityUnitId:
          type: integer
        sourceStorageId:
          type: integer
        destinationStorageId:
          type: integer
        notes:
          type: string
          
    BatchUsage:
      required:
      - id
      - productId
      - batchId
      - quantityTaken
      - quantityUnitId
      properties:
        id:
          type: integer
          description: StorageBatchHistoryId
        date:
          type: string
          format: date
        productId:
          type: integer
        batchId:
          type: integer
        batchNumber:
          type: string
        expiryDate:
          type: string
          format: date
        manufactureDate:
          type: string
          format: date    
        quantityTaken:
          type: number
          description: Amount of batch used; positive.
        quantityUnitId:
          type: integer
        eventId:
          type: integer
          description: Id of Livestock activity/event where the batch was used. Non-null for Livestock activities only.
        activityHistoryId:
          type: integer
          description: Id of the Cropping activity where the batch was used. Non-null for Cropping activities only.
          
    CarcaseFileImportMap:
      required:
      - filename
      - dateFormat
      - skipRecords
      - fieldMaps
      properties:
        filename:
          type: string
        dateFormat:
          type: string
        skipRecords:
          type: integer
        fieldMaps:
          type: array
          items:
            $ref: '#/components/schemas/CarcaseFileImportMapping'

    CarcaseFileImportMapping:
      properties:
        fieldIndex:
          type: number
        masterTraitId:
          type: number

    CarcaseFileImportResult:
      properties:
        errors:
          type: array
          items:
            type: string
        successCount:
          type: integer

    CarcaseFileImport:
      properties:
        filename:
          type: string
        totalRecordCount:
          type: integer
        records:
          type: array
          items:
            $ref: '#/components/schemas/CarcaseImportRecord'
        fieldMaps:
          type: array
          items:
            $ref: '#/components/schemas/CarcaseFileImportMapping'

    CarcaseImportRecord:
      required:
      - data
      properties:
        data:
          type: array
          items: 
            type: string

    CarcaseReportDataBase:
      required:
      - traitIds
      - reportType
      - groupAnimalsBy
      - orderByTraitId
      properties:
        traitIds:
          type: array
          description: Carcase master trait Ids to include in the report.
          items:
            type: integer
        reportType:
          description: >
            The type or report. Two options are available:
             * summary: Includes just the totals for each group.
             * detail: Show individual animals.
          type: string
          enum:
          - summary
          - detail
        identifyAnimalsBy:
          description: Field to use for identifying animals in a 'detail' `reportType`. Default is `rfid`. 
          type: string
          enum:
          - rfid
          - nlis id
          - management tag
        groupAnimalsBy:
          description: Groups the report data. Default is `class`.
          type: string
          enum:
          - breed
          - breed type
          - class
          - sex
          - sire
          - dam
          - sire class
          - dam class
          - property
          - pic of origin
        orderByTraitId:
          description: Carcase trait to order results by. Must be present in `traitIds`. Defaults to `Total Weight` if selected.
          type: integer
        chartAxisXTraitId:
          description: |
            Carcase trait to put on the X axis of the report chart. Must be a number trait not a string trait (e.g. `Weight` not `Sex`) and 
            must be present in `traitIds`.
          type: integer
        chartAxisYTraitId:
          description: |
            Carcase trait to put on the Y axis of the report chart. Must be a number trait not a string trait (e.g. `Weight` not `Sex`) and 
            must be present in `traitIds`.
          type: integer
        chartBenchmarkX:
          description: Value to show as a benchmark for the X axis of the report chart.
          type: number
        chartBenchmarkY:
          description: Value to show as a benchmark for the Y axis of the report chart.
          type: number

    CarcaseReportBinding:
      allOf:
      - $ref: '#/components/schemas/CarcaseReportDataBase'
      properties:
        activityIds:
          type: array
          description: Animals in the given livestock activities will be included in the report.
          items:
            type: integer 

    CarcaseReportResult:
      description: The selector values used to generate the report.
      allOf:
      - $ref: '#/components/schemas/CarcaseReportDataBase'
      properties:
        activities:
          type: array
          items:
            $ref: '#/components/schemas/LivestockActivity'

    CarcaseReportSelectorData:
      required:
      - orderByTraitIds
      - groupAnimalsBy
      - identifyAnimalsBy
      - reportTypes
      properties:
        orderByTraitIds:
          type: array
          items:
            type: integer
        groupAnimalsBy:
          description: Available options to group animals by.
          type: array
          items:
            $ref: '#/components/schemas/LivestockReportGroupBy'
        identifyAnimalsBy:
          description: Available options to identify animals by.
          type: array
          items:
            $ref: '#/components/schemas/LivestockReportAnimalIdentifier'
        reportTypes:
          description: Available report types.
          type: array
          items:
            $ref: '#/components/schemas/LivestockReportReportTypes'

    CarcaseReport:
      required:
      - selectors
      - timeToGenerate
      - reportDateTime
      properties:
        selectors:
          $ref: '#/components/schemas/CarcaseReportResult'
        reportDateTime:
          description: Date and time the report was generated.
          type: string
          format: datetime
        timeToGenerate:
          description: Milliseconds (ms) taken to generate the report.
          type: number
        groups:
          description: Report data by animal group.
          type: array
          items:
            $ref: '#/components/schemas/CarcaseReportGroup'
        summary:
          description: Rerport data totals/summary across all groups.
          type: array
          items:
            $ref: '#/components/schemas/CarcaseReportGroupTraitSummary'

    CarcaseReportGroup:
      properties:
        name:
          description: Name of the group.
          type: string
        traits:
          type: array
          items: 
            $ref: '#/components/schemas/CarcaseReportGroupTraitSummary'
        carcases:
          description: |
            Individual carcases that make up the group. Note that these will only
            be present in a 'detail' report.
          type: array
          items:
            $ref: '#/components/schemas/CarcaseReportCarcase'

    CarcaseReportGroupTraitSummary:
      properties:
        masterTraitId:
          description: Trait to which this data pertains.
          type: integer
        average:
          description: Averaged value.
          type: number
        total:
          description: Sum of all values in the group.
          type: number
        min:
          description: Minimum value found in the group.
          type: number
        max:
          description: Maximum value found in the group.
          type: number
        carcaseCount:
          type: integer

    CarcaseReportCarcase:
      properties:
        id:
          description: Phoenix AnimalID.
          type: integer
        rfid:
          description: RFID of the animal.
          type: string
        nlisid:
          description: NLIS ID of the animal.
          type: string
        managementTag:
          description: Management tag value of the animal.
        traits:
          description: Carcase traits.
          type: array
          items:
            $ref: '#/components/schemas/CarcaseReportCarcaseTrait'
            
    CarcaseReportCarcaseTrait:
      properties:
        masterTraitId:
          type: integer
        value:
          description: Value of trait. May be a string, integer or floating-point number.
          type: string

    CarcaseTrait:
      required:
      - id
      - name
      - type
      properties:
        id:
          type: integer
        name:
          description: Friendly display name of the trait.
        type:
          description: Data type of the carcase trait.
          type: string
          enum:
          - string
          - integer
          - number
          - reportChart
        fields:
          description: Data fields the trait pertains to.
          type: array
          items:
            type: string 
        required:
          description: True if this trait is required for individual carcase records.
          type: boolean
        reportTotal:
          description: True if this trait reports a total value across groups in the carcase report.
          type: boolean
        reportAverage:
          description: True if this trait reports averages across groups in the carcase report.
          type: boolean
        reportChart:
          description: True if the report is suitable for display as a chart.
          type: boolean
        reportChartDefaultAxisX:
          description: True if this trait is to used a default selection for report chart X axis.
          type: boolean
        reportChartDefaultAxisY:
          description: True if this trait is to used a default selection for report chart Y axis.
          type: boolean          
        animalIdentifier:
          description: Populated if the carcase trait is considered an animal identifier type.
          type: string
          enum:
          - aitRFID
          - aitNLISID
          - aitMgtTag
          
    CardFile:
      required:
      - id
      - name
      properties:
        id:
          type: integer
        name:
          type: string
        name2:
          type: string
        contact:
          type: string
        bankAccountNumber:
          type: string
        bankBsb:
          type: string
        reference:
          type: string
        taxNumber:
          type: string
        customerId:
          type: integer
          description: Id of the linked sub-account; null if not linked.
        supplierId:
          type: integer
          description: Id of the linked sub-account; null if not linked.
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/CardFileAddress'
        phones:
          type: array
          items:
            $ref: '#/components/schemas/CardFilePhone'
        emails:
          type: array
          items:
            $ref: '#/components/schemas/CardFileEmail'
        
    CardFileAddress:
      required:
        - id
        - label
        - address1
      properties:
        id:
          type: integer
        label:
          type: string
        address1:
          type: string
        address2:
          type: string
        town:
          type: string
        state:
          type: string
        postcode:
          type: string
        country:
          type: string

    CardFileEmail:
      required:
      - id
      - label
      - email
      properties:
        id:
          type: integer
        label:
          type: string
        email:
          type: string
        eftNotify:
          type: boolean
          
    CardFilePhone:
      required:
        - id
        - label
        - number
      properties:
        id:
          type: integer
        label:
          type: string
        number:
          type: string

    CropSeason:
      required:
      - seasonId
      - seasonName
      - totalCropArea
      - areaUnitDescription
      - properties
      properties:
        seasonId:
          type: integer
        name:
          type: string
        totalCropArea:
          type: number
        areaUnitDescription:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/CropSeasonPropertyArea'

    CropSeasonPropertyArea:
      required:
      - propertyId
      - cropArea
      properties:
        propertyId:
          type: integer
        cropArea:
          type: number
          
    Dashboard:
      required:
      - id
      - name
      - shared
      - ownerId
      properties:
        id:
          type: integer
        name:
          type: string
        shared:
          type: boolean
        ownerId:
          type: integer

    DashboardGadget:
      required:
      - id
      - dashboardId
      - gadgetType
      properties:
        id:
          type: integer
        dashboardId:
          type: integer
        gadgetType:
          type: string
        columnIndex:
          type: integer
        positionIndex:
          type: integer
        width:
          type: integer
        height:
          type: integer
        config:
          description: Config keys and values specific to the gadget.
          type: object

    Dataset:
      required:
      - id
      - name
      properties:
        id:
          description: |
            The datasetId Guid.
          type: string
          format: uuid
        phoenixLiveDatasetId:
          description: |
            The server location and alias identifer Id for Phoenix Live.
          type: string
        name:
          type: string
        dataVersion:
          description: |
            The current data version of the dataset.
            If this value is null or missing, the dataset is incompatible or corrupted and should not be used.
          type: string

    FileLibraryItem:
      required:
        - id
        - filename
        - safeDisplayFilename
        - size
        - created
        - createdBy
      properties:
        id:
          type: string
          format: uuid
        filename:
          type: string
        safeDisplayFilename:
          type: string
        size:
          description: File size in bytes
          type: integer
          format: int64
        tags:
          $ref: '#/components/schemas/FileLibraryItemTags'
        transactionLinks:
          type: array
          items:
            $ref: '#/components/schemas/FileLibraryItemTransactionLink'
        created:
          type: string
          format: date-time
        createdBy:
          type: string
          maxLength: 320
        deleted:
          type: string
          format: date-time
        deletedBy:
          type: string
          maxLength: 120
    
    FileLibraryItemBinding:
      properties:
        filename:
          type: string
        tags:
          $ref: '#/components/schemas/FileLibraryItemTags'
        transactionIds:
          type: array
          items:
            type: integer

    FileLibraryItemTagBinding:
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 32
            
    FileLibraryItemTags:
      type: array
      maxLength: 10
      items:
        $ref: '#/components/schemas/FileLibraryTag'
        
    FileLibraryTag:
      required:
        - name
        - fileCount
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 32
        fileCount:
          type: integer

    FileLibraryItemTransactionLinkBinding:
      required:
        - tranasctionId
      properties:
        transactionId:
          type: integer
          format: int64
        note:
          type: string
          
    FileLibraryItemTransactionLink:
      required:
        - transactionId
      properties:
        transactionId:
          type: integer
          format: int64
        note:
          type: string

    IndividualClassInLocation:
      required:
      - classId
      - propertyId
      properties:
        classId:
          type: integer
        paddockId:
          type: integer

    IndividualClassOnProperty:
      required:
      - classId
      - propertyId
      properties:
        classId:
          type: integer
        propertyId:
          type: integer
    
    Invoice:
      required:
      - accountid
      - subAccountId
      - amount
      - paid
      - name
      - reference
      properties:
        accountId:
          type: integer
          description: Id of the account.
        subAccountId:
          type: integer
          description: Id of the customer sub-account the invoice is for.
        name:
          type: string
          description: Name of the customer sub-account.
        amount:
          type: number
          description: The total invoice amount.
        paid:
          type: number
          description: The amount that has been already been paid.
        owing:
          type: number
          description: The unpaid amount for the invoice.
        dueDate:
          type: string
          format: date
          description: The due date for the invoice.
        reference:
          type: string
          description: The invoice number.

    InventoryBatch:
      required:
      - batchId
      - productId
      - storageId
      - propertyId
      - quantity
      - quantityUnitId
      - unitPrice
      - expiryStatus
      properties:
        batchId:
          type: integer
        productId:
          type: integer
        storageId: 
          type: integer
        storageName:
          type: string
        batchNumber:
          type: string
        propertyId:
          type: integer
        quantity:
          type: number
        quantityUnitId:
          type: integer
        unitPrice:
          type: number
        expiryDate:
          type: string
          format: date
        manufactureDate:
          type: string
          format: date
        expiryStatus:
          type: string
          enum:
          - good
          - expired
          - spoiled
          
    InventoryBatchAdjustment:
      required:
      - batchId
      - date
      - qtyOnHand
      - reasonId    
      properties:
        batchId:
          type: integer
        date:
          type: string
          format: date
        quantityOnHand:
          type: number
        reasonId:
          type: integer
        notes:
          type: string
    
    InventoryBatchTransfer:
      required:
      - batchId
      - date
      - quantity
      - destinationStorageId    
      properties:
        batchId:
          type: integer
        date:
          type: string
          format: date
        quantity:
          type: number
        destinationStorageId:
          type: integer
        notes:
          type: string          

    LivestockActivity:
      required:
      - id
      - activityTypeId
      - description
      - date
      properties:
        id:
          type: integer
        activityTypeId:
          type: integer
        description:
          type: string
        date:
          type: string
          format: date
          
    LivestockActivityAnimals:
      description: |
        If an activity is for individual animals, then object individuals and its properties are non-null.
        If an activity is for a mob, only mobid is populated.    
      properties:
        individuals:
          $ref: '#/components/schemas/IndividualClassOnProperty'
        mobId:
          type: integer          

    LivestockActivityType:
      required:
      - id
      - name
      properties:
        id:
          type: integer
        name:
          type: string
  
    LivestockClassIcon:
      required:
      - id
      - name
      - type
      properties:
        id:
          type: integer
        name:
          type: string
        type:
          type: string
        iconName:
          type: string
        iconColour:
          type: string
          
    LivestockApplyProduct:
      description: Base Livestock Treatment/Feed resource.
      required:
      - id
      - date
      - product
      - productRatePerHead
      - productRateUnitId
      - headCount
      - whpClearDate
      - esiClearDate      
      properties:
        id: 
          type: integer
          description: EventId of activity.
        mobId:
          type: integer
        individuals:
          type: array
          items:
            $ref: '#/components/schemas/IndividualClassInLocation'
        date:
          type: string
          format: date
        productId:
          type: integer          
        product:
          type: string
          description: Name of product used.
        productRatePerHead:
          type: number
        productRateUnitId:
          type: integer
        headCount:
          type: integer
          description: Number of animals in activity.
        productCostPerHead:
          type: number
        otherCostPerHead:
          type: number
        whpClearDate:
          type: string
          format: date
        esiClearDate:
          type: string
          format: date          
        notes:
          type: string

    LivestockFeed:
      description: Livestock Feed activity.
      allOf:
      - $ref: '#/components/schemas/LivestockApplyProduct'
      
    LivestockFeedHistory:
      description: 'Animals (individuals class or mob) with Livestock Feed activities.'
      properties:
        animals:
          $ref: '#/components/schemas/LivestockActivityAnimals'
        feeds:
          type: array
          items: 
            $ref: '#/components/schemas/LivestockFeed'    
            
    LivestockFeedsBinding:
      description: Input for POST /livestockfeeds. At least one of individuals or mobs (or both) must be supplied.
      required:
        - date
        - productUsages
      properties:
        date:
          type: string
          format: date
        productUsages:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/ProductUsage'
          description: |
            Each of the inner arrays represents one product usage.
            
            For simple product usages these will have one element. 
            
            For inventory product usages there may be multiple elements, where each element is a different batch of the same product.
        individuals:
          type: array
          items: 
            $ref: '#/components/schemas/IndividualClassInLocation'
          description: Either this or mobs (or both) must be populated.
        mobs: 
          type: array
          items: 
            $ref: '#/components/schemas/MobInLocation'
          description: Either this or individuals (or both) must be populated.
        otherCostPerHead:
          type: number
        notes:
          type: string
          description: User's activity notes.
          
    LivestockAllHistory:
      description: 'Animals (individuals class or mob) with all Livestock activities.'      
      properties:
        animals:
          $ref: '#/components/schemas/LivestockActivityAnimals'
        movements:
          type: array
          items: 
            $ref: '#/components/schemas/LivestockMovementHistoryItem'  
        treatments:
          type: array
          items: 
            $ref: '#/components/schemas/LivestockTreatment' 
        feeds:
          type: array
          items: 
            $ref: '#/components/schemas/LivestockFeed'

    LivestockIconBinding:
      required:
      - id
      - iconName
      - iconColour
      properties:
        id:
          type: integer
        iconName:
          type: string
        iconColour:
          type: string

    LivestockIndividualLocation:
      required:
      - classId
      - count
      - lastMovementDate
      properties:
        classId:
          type: integer
        count:
          type: integer
        lastMovementDate:
          type: string
          format: date
        onFeed:
          type: boolean
        agistment:
          type: boolean
        agistmentData:
          type: array
          items:
            $ref: '#/components/schemas/AgistmentData'
            
    LivestockMobIcon:
      required:
      - id
      - class
      - name
      properties:
        id:
          type: integer
        classId:
          type: integer
        name:
          type: string
        iconName:
          type: string
        iconColour:
          type: string

    LivestockMobLocation:
      required:
      - mobId
      - classId
      - count
      - lastMovementDate
      properties:
        mobId:
          type: integer
        classId:
          type: integer
        count:
          type: integer
        lastMovementDate:
          type: string
          format: date
        onFeed:
          type: boolean
        agistment:
          type: boolean
        agistmentData:
          type: array
          items:
            $ref: '#/components/schemas/AgistmentData'
            
    LivestockMovement:
      description: Livestock Movement activity.
      required:
      - id
      - date
      - destinationPaddockId
      - onFeed
      - agistment
      properties:
        id:
          type: integer
        mobId:
          type: integer
        individualClassIds:
          type: array
          items:
            type: integer
        date:
          type: string
          format: datetime
        sourcePaddockIds:
          description: |
            Mob movement activities can have multiple source paddock ids.
            Individual movement activities will always have one source paddock id.
          type: array
          items: 
            type: integer
        destinationPaddockId:
          type: integer
        headCount:
          type: integer
        onFeed:
          type: boolean
        agistment:
          type: boolean
        agistmentRate:
          type: number
        agistmentTimeUnitId:
          type: integer
        notes:
          type: string
          
    LivestockMovementHistory:
      description: 'Animals (individuals class or mob) with Livestock Movement activities.'
      properties:
        animals:
          $ref: '#/components/schemas/LivestockActivityAnimals'
        movements:
          type: array
          items: 
            $ref: '#/components/schemas/LivestockMovementHistoryItem'
    
    LivestockMovementHistoryItem:
      description: Livestock Movement activity.
      required:
      - id
      - date
      - destinationPaddockId
      - onFeed
      - agistment
      properties:
        id:
          type: integer
        date:
          type: string
          format: datetime
        sourcePaddockIds:
          type: array
          items: 
            type: integer
        destinationPaddockId:
          type: integer
        headCount:
          type: integer
        onFeed:
          type: boolean
        agistment:
          type: boolean
        agistmentRate:
          type: number
        agistmentTimeUnitId:
          type: integer
        notes:
          type: string    
    
    LivestockMovementBinding:
      required:
      - movementDate
      - sourcePaddockId
      - destinationPaddockId
      properties:
        movementDate:
          type: string
          format: datetime
        sourcePaddockId:
          type: integer
        sourceClassId:
          type: integer
        sourceMobId:
          type: integer
        sourceMobCount:
          type: integer
        destinationPaddockId:
          type: integer
        onFeed:
          type: boolean
        agistment:
          type: boolean
        agistmentData:
          $ref: '#/components/schemas/AgistmentData'
        nvd:
          description: National Vendor Declaration. Currently only in the C# API.
          type: string
        notes:
          type: string

    LivestockOptions:
      required:
      - dayFractions
      properties:
        dayFractions:
          type: boolean
    
    LivestockReportAnimalIdentifier:
      required:
      - id
      - name
      - default
      properties:
        id:
          type: string
        name:
          type: string
        default:
          type: boolean

    LivestockReportGroupBy:
      required:
      - id
      - name
      properties:
        id:
          type: string
        name:
          type: string
        default:
          type: boolean
          
    LivestockReportReportTypes:
      required:
      - id
      - name
      - default    
      properties:
        id:
          type: string
        name:
          type: string
        default:
          type: boolean

    LivestockTreatmentsBinding:
      description: Input for /livestocktreatments. At least one of individuals or mobs (or both) must be supplied.
      required:
        - date
        - productUsages
      properties:
        date:
          type: string
          format: date
        productUsages:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/ProductUsage'
          description: |
            Each of the inner arrays represents one product usage.
            
            For simple product usages these will have one element. 
            
            For inventory product usages there may be multiple elements, where each element is a different batch of the same product.
        individuals:
          type: array
          items: 
            $ref: '#/components/schemas/IndividualClassInLocation'
          description: Either this or mobs (or both) must be populated.
        mobs: 
          type: array
          items: 
            $ref: '#/components/schemas/MobInLocation'
          description: Either this or individuals (or both) must be populated.
        otherCostPerHead:
          type: number
        notes:
          type: string
          description: User's activity notes.
          
    LivestockTreatment:
      description: Livestock Treatment activity.
      allOf:
      - $ref: '#/components/schemas/LivestockApplyProduct'

    LivestockTreatmentHistory:
      description: 'Animals (individuals class or mob) with Livestock Treatment activities.'
      properties:
        animals:
          $ref: '#/components/schemas/LivestockActivityAnimals'
        treatments:
          type: array
          items: 
            $ref: '#/components/schemas/LivestockTreatment'

    MappingProject:
      required:
      - id
      - name
      - production
      - layers
      properties:
        id:
          type: string
        name:
          type: string
        production:
          type: boolean
        layers:
          type: array
          items:
            $ref: '#/components/schemas/MappingProjectLayer'
          
    MappingProjectLayer:
      required:
      - id
      - name
      - production
      - mappingProjectId
      properties:
        id:
          type: string
        name:
          type: string
        production:
          type: boolean
        mappingProjectId:
          type: string

    MappingProjectLayerGeoJson:
      required:
      - type
      - crs
      - features
      properties:
        type:
          type: string
        crs:
          type: array
          items:
            type: string
        features:
          type: array
          items:
            type: string

    AppOptions:
      required:
      - id
      properties:
        id:
          type: string
        baseLayer:
          type: string
        layerStyling:
          type: string
        showPaddockNames:
          type: boolean
        showPaddockArea:
          type: boolean
        showHeadCounts:
          type: boolean
        locked: 
          type: boolean
          description: Is the map currently locked so that it cannot be moved.
        viewextent:
          type: array
          items:
            type: number

    MeasurementUnit:
      required:
      - id
      - measurementTypeID
      - description
      - abbrev
      - factor
      properties:
        id:
          type: integer
        measurementTypeId:
          type: integer
        description: 
          type: string
        abbrev:
          type: string
        factor:
          type: number
    
    MobHeadCount:
      required:
      - mobId
      - headCount
      properties:
        mobId:
          type: integer
        headCount:
          type: integer
          
    MobInLocation:
      required:
      - mobId
      - classId
      - paddockId
      - headCount
      properties:
        mobId:
          type: integer
        classId:
          type: integer
        paddockId:
          type: integer
        headCount:
          type: integer
    
    Paddock:
      required:
      - id
      - name
      - propertyId
      properties:
        id:
          type: integer
        name:
          type: string
        propertyId:
          type: integer
        parentPaddockId:
          type: integer
        totalArea:
          type: number
        arableArea:
          type: number          
        areaUnitId:
          type: integer
        establishedDate:
          type: string
          format: date
        closedDate:
          type: string
          format: date
        owned:
          type: boolean
        livestockIndividuals:
          type: array
          items:
            $ref: '#/components/schemas/LivestockIndividualLocation'
        livestockMobs:
          type: array
          items:
            $ref: '#/components/schemas/LivestockMobLocation'

    ProduceInventoryQuantity:
      required:
      - cropTypeId
      - cropTypeName
      - totalQuantity
      properties:
        cropTypeId:
          type: integer
        cropTypeName:
          type: string
          description: Crop name.
        totalQuantity:
          type: integer
        measUnitId:
          type: integer
        measUnitAbbrevPlural:
          type: string
        storages:
          type: array
          items:
            $ref: '#/components/schemas/ProduceInventoryQuantityStorage'
            
    ProduceInventoryQuantityStorage:
      required:
      - storageId
      - propertyId
      - quantity
      properties:
        storageId:
          type: integer
        propertyId:
          type: integer
        quantity:
          type: number

    ProduceStorage:
      required:
      - storageId
      - propertyId
      - propertyName
      - storage
      - crop
      - currentTotal
      - unitID
      - unitDescription
      properties:
        storageId:
          type: integer
        propertyId:
          type: integer
        propertyName:
          type: string
        storage:
          type: string
        crop:
          type: string
        currentTotal:
          type: number
        totalCapacity:
          type: number
        unitID:
          type: integer
        unitDescription:
          type: string

    Product:
      required:
      - id
      - productTypeId
      - name
      - defaultRateUnitId
      - defaultRatePerUnitid
      - purchaseUnitId
      properties:
        id:
          type: integer
        productTypeId:
          type: integer
        name: 
          type: string
        defaultRate:
          type: number
        defaultRateUnitId:
          type: integer
        defaultRatePerUnitId:
          type: integer
        purchaseUnitId:
          type: integer
        purchaseUnitCost:
          type: number
          description: Cost of a single purchase unit of the product. Corresponding Product table field is 'DefRateCost'.
        notes:
          type: string

    ProductBatchBinding:
      required:
      - productId
      - quantityUnitId
      - deliveryDate
      - storages
      properties:
        productId:
          description: Id of the product being input.
          type: integer
        batchNumber:
          type: string
        quantityUnitId:
          description: The measurement unit id of quantity values.
          type: integer
        totalPrice:
          type: number        
        expiryDate:
          type: string
          format: date
        manufactureDate:
          type: string
          format: date
        supplierId:
          description: Id of the Phoenix card file contact that supplied the product.
          type: integer
        deliveryDate:
          description: The date at which the batch is available on-site.
          type: string
          format: date
        cvd:
          type: string
        storages:
          type: array
          items:
            $ref: '#/components/schemas/ProductStorageBatchBinding'

    ProductStorageBatchBinding:
      required:
      - storageId
      - quantity
      properties:
        storageId:
          type: integer
        quantity:
          type: number
          
    ProductInventoryQuantity:
      required:
      - productId
      - productName
      - measUnitId
      - measUnitAbbrevPlural
      - totalQuantity
      properties:
        productId:
          type: integer
        productName:
          type: string
        measUnitId:
          type: integer
        measUnitAbbrevPlural:
          type: string
        totalQuantity:
          type: number
        storages:
          type: array
          items:
            $ref: '#/components/schemas/ProductInventoryQuantityStorage'          
          
    ProductInventoryQuantityStorage:
      required:
      - storageId
      - quantity
      properties:
        storageId:
          type: integer
        quantity:
          type: number
          
    ProductStorage:
      required:
      - storageId
      - storageName
      - storageTypeId
      - startDate
      - propertyId
      - currentTotal
      - managedByAllocation
      properties:
        storageId:
          type: integer
        storageName:
          type: string
        storageTypeId:
          type: integer
        startDate:
          type: string
          format: date
        propertyId:
          type: integer
          description: Property Id to which the storage belongs.
        currentTotal:
          type: integer
        managedByAllocation:
          type: boolean

    ProductType:
      required:
      - id
      - name
      properties:
        id:
          type: integer
        name:
          type: string

    ProductUsage:
      required:
      - productId
      - quantityRate
      - quantityUnitId
      properties:
        productId:
          type: integer
        batchId:
          type: integer
          description: Zero when inventory is not used.
        batchNumber: 
          type: string
          description: Ignored when inventory is not used.
        expiryDate:
          type: string
          format: date
          description: Ignored when inventory is not used.
        quantityRate:
          type: number
          description: Product usage rate per head.
        quantityUnitId:
          type: integer
          description: Unit of quantityRate.
        costPerUnit:
          type: number
          description: Product cost per quantityUnitId. This should only be populated by the client for a "non-inventory usage". For normal inventory batch usages, this is ignored - the cost will be calculated by the Batch Usage Service.

    Property:
      required:
      - id
      - name
      - abbrevName
      - establishedDate
      - mappingEnabled
      - livestockEnabled
      - croppingEnabled
      - weatherEnabled
      properties:
        id:
          type: integer
        name:
          type: string
        abbrevName:
          type: string
        brandDescription:
          type: string
        pic:
          type: string
        establishedDate:
          type: string
          format: date
        closedDate:
          type: string
          format: date
        totalArea:
          type: integer
        totalAreaUnitId:
          type: integer
        mappingEnabled:
          type: boolean
        livestockEnabled:
          type: boolean
        croppingEnabled:
          type: boolean
        weatherEnabled:
          type: boolean
        note:
          type: string

    PropertyBinding:
      required:
      - name
      - abbrevName
      - ownership
      - mappingEnabled
      - livestockEnabled
      - croppingEnabled
      - weatherEnabled
      properties:
        name:
          type: string
        abbrevName:
          type: string
        brandDescription:
          type: string
        pic:
          type: string
        establishedDate:
          type: string
          format: date
        closedDate:
          type: string
          format: date
        ownership:
          type: boolean
        eUAccreditation:
          type: string
        totalArea:
          type: integer
        totalAreaUnitId:
          type: integer
        mappingEnabled:
          type: boolean
        livestockEnabled:
          type: boolean
        croppingEnabled:
          type: boolean
        weatherEnabled:
          type: boolean
        note:
          type: string

    SemaphoreLockBinding:
      required:
      - module
      properties:
        module:
          type: string
        group:
          type: string

    SemaphoreLockResource:
      required:
      - id
      properties:
        id:
          type: integer
    
    Storage:
      required:
      - id
      - storageTypeId
      - storageTypeName
      - name
      properties:
        id:
          type: integer
        name:
          type: string
        storageTypeId:
          type: integer
        storageTypeName:
          type: string

    StorageType:
      required:
      - id
      - name
      properties:
        id:
          type: integer
        name:
          type: string

    TradingAccount:
      required:
      - accountId
      - subAccountId
      - name
      properties:
        accountId:
          type: integer
        subAccountId:
          type: integer
        name:
          type: string
          description: The customer sub-account name.
        period:
          type: string
          format: datetime
          description: The current period of the account.

    TradingAccountOwing:
      allOf:
      - $ref: '#/components/schemas/TradingAccount'
      - type: object
        required:
        - amountOwing
        properties:
          amountOwing:
            type: number

    TradingAccountSummary:
      required:
      - accountId
      - subAccountId
      - name
      - balance
      - currentPeriod
      - amountOverdue
      - amountUnapplied
      properties:
        accountId:
          type: integer
        subAccountId:
          type: integer
        name:
          type: string
        currentPeriod:
          type: string
          format: date
        balance:
          description: |
            Current overall balance position of the sub-account. This is the 'Unpaid Invoices' less 
            the 'Unapplied Credit'.
          type: number
        amountOwing:
          description: Total unpaid balance of all outstanding invoices. 
          type: number
        amountUnapplied:
          type: number
          description: Total of all credit that has yet to be assigned.
        futurePayments:
          type: number
          description: Total of all payments and credit notes entered after the current period for the account.

    User:
      required: 
      - id
      - enabled
      properties:
        id:
          type: integer
        userName:
          type: string
        givenName:
          type: string
        surname:
          type: string
        payrollUserName:
          type: string
        enabled:
          type: boolean
        role:
          $ref: '#/components/schemas/UserRole'
        onlineAccountId:
          type: string
        onlineAccountEmail:
          type: string
          format: email

    UserRole:
      required:
      - id
      - enabled
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        enabled:
          type: boolean

    UserBinding:
      required: 
      - enabled
      properties:
        userName:
          type: string
        givenName:
          type: string
        surname:
          type: string
        payrollUserName:
          type: string
        enabled:
          type: boolean
        onlineAccountId:
          type: string
        onlineAccountEmail:
          type: string
          format: email

    WaterInventoryQuantity:
      required:
      - storageId
      - propertyId
      - storageName
      - totalQuantity
      - measUnitId
      - measUnitAbbrevPlural
      properties:
        storageId:
          type: integer
        propertyId:
          type: integer
          description: Property Id to which the storage belongs.
        storageName:
          type: string
        totalQuantity:
          type: number
          description: Volume of water currently in the storage; see `measUnitAbbrevPlural` for specific measurement unit.
        measUnitId:
          type: integer
        measUnitAbbrevPlural:
          type: string

  headers:
    X-TotalCount:
      description: The total number of available results. Used for paging.
      schema:
        type: integer

  parameters:

    DashboardName:
      name: name
      description: Name of the dashboard.
      schema:
        type: string
      in: query
      required: true
      
    FileLibraryFileId:
      name: id
      description: Id of the file
      in: path
      schema:
        type: string
        format: uuid
      required: true

    Limit:
      name: limit
      description: Limit to a certain number of results.
      schema:
        type: integer
      required: false
      in: query

    Offset:
      name: offset
      description: Skip this many items in the result.
      schema:
        type: integer
      required: false
      in: query
      
    Page:
      name: page
      description: Page number to return (page 1 is the first page).
      schema:
        type: integer
      in: query
      required: true
      
    PageSize:
      name: pageSize
      description: The number of results in one page.
      schema:
        type: integer
      in: query
      required: true

    StoragesPropertyId:
      name: propertyId
      description: Limit results to only storages on a particular property.
      in: query
      schema:
        type: integer
      required: false
      
    UsernameHeader:
      name: x-agdata-username
      description: Name of the user submitting the request. This value is required for the Phoenix win32 client only.
      in: header
      required: false
      schema:
        type: string
        minLength: 1
        maxLength: 320
